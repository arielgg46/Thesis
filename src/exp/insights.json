{
    "agent": {
        "domain": {
            "blocksworld": {
                "rules": [],
                "world_knowledge": []
            },
            "gripper": {
                "rules": [],
                "world_knowledge": []
            },
            "floor-tile": {
                "rules": [],
                "world_knowledge": []
            }
        },
        "general": {
            "rules": []
        }
    },
    "human": {
        "domain": {
            "blocksworld": {
                "rules": [
                    [
                        "I have to ALWAYS SPECIFY the state of each block (it's top and bottom) and of the arm (empty or holding a block)",
                        100
                    ],
                    [
                        "In my reasoning, both in the init and goal state, I MUST ALWAYS define the towers/stacks of blocks as bracketed lists of objects, e.g. [b1, b2, ..., bN] represents a stack, with the first element (b1) on the table, subsequent elements stacked on top of the previous one, and the last element (bN) clear"
                    ],
                    [
                        "In the PDDL I have to ALWAYS define the blocks states by each stack/tower they form, like a sequence of predicates ALWAYS of the form (clear bA) (on bA bB) (on bB bC) ... (on bY bZ) (on-table bZ) is a tower of blocks bA through bZ with the first on top and the last on the bottom of the tower",
                        100
                    ]
                ],
                "world_knowledge": [
                    [
                        "(clear bX) means that block bX has it's top clear, no other block is on top of it",
                        100
                    ],
                    [
                        "(on-table bX) means that block bX is directly laying on the table",
                        100
                    ],
                    [
                        "(arm-empty) means that the arm is empty, it is not holding any block",
                        100
                    ],
                    [
                        "(holding bX) means that the arm is holding block bX, it is not empty",
                        100
                    ],
                    [
                        "(on bX bY) means block bX is on top of block bY",
                        100
                    ],
                    [
                        "(on bX bX) is invalid: no block can be on top of itself",
                        100
                    ],
                    [
                        "A block can only be on the table or on top of another, and in the later case it doesn't count as being on the table",
                        100
                    ],
                    [
                        "A block can only be clear or have another block directly on top of it, it cannot have more than one block directly on top of it",
                        100
                    ],
                    [
                        "The arm can only be empty or holding exactly one block, it cannot be holding more than one block",
                        100
                    ],
                    [
                        "The only objects are the blocks. The table and the arm are not objects",
                        100
                    ]
                ]
            },
            "gripper": {
                "rules": [
                    [
                        "I MUST EXPLICITELY define in the init state the rooms, balls and grippers with predicates (room R), (ball B) and (gripper G)",
                        100
                    ],
                    [
                        "I have to ALWAYS SPECIFY the state of each ball (it is either held by a gripper, or it is at some room) and each gripper (free or holding one ball). In the init state this is MANDATORY for each object, and in the goal state ONLY the ones needed to guarantee the stated goal conditions",
                        100
                    ],
                    [
                        "In my reasoning I SHOULD first explicitely define the balls in every room with a bracketed list of balls for each room, and the state of each gripper by pairs of (gripper, state) where state is either 'free' or the ball it holds"
                    ]
                ],
                "world_knowledge": [
                    [
                        "The only objects are the rooms, the balls and the grippers, and have to be explicitely defined with predicates (room R), (ball B) and (gripper G) respectively, in the :init section",
                        100
                    ],
                    [
                        "(at-robby roomX) means that the robby is at roomX",
                        100
                    ],
                    [
                        "(at ballX roomY) means that ballX is at roomY",
                        100
                    ],
                    [
                        "(carry ballX gripperY) means that gripperY is carrying ballX",
                        100
                    ],
                    [
                        "(free gripperX) means that gripperX is free",
                        100
                    ],
                    [
                        "The robby is only one and it must be at exactly one room",
                        100
                    ],
                    [
                        "A ball can only be at exactly one room, or being carried by a gripper (in which case the \"carry\" predicate is used, and not the \"at\")",
                        100
                    ],
                    [
                        "A gripper can only be free, or holding exactly one ball, it cannot hold more than one ball",
                        100
                    ]
                ]
            },
            "floor-tile": {
                "rules": [
                    [
                        "In my reasoning, both of the initial and the goal state, I MUST ALWAYS define the grid as line-separated bracketed lists of tuples (tileX, coloring) to represent each row, from top to bottom, where coloring is either 'unpainted' or some 'colorY'", 
                        100
                    ],
                    [
                        "I MUST understand the rows as tiles distributed horizontally (hence using 'right' predicates to define them internally), and the columns as tiles distributed vertically (hence using 'up' predicates to define them internally)",
                        100
                    ]
                ],
                "world_knowledge": [
                    [
                        "(robot-at robotX tileY) means that the robotX is at the tileY",
                        100
                    ],
                    [
                        "(robot-has robotX colorY) means that the robotX has the colorY",
                        100
                    ],
                    [
                        "(right tileR tileL) means that tileR is adjacent and to the right of tileL, in the same row",
                        100
                    ],
                    [
                        "(up tileU tileD) means that tileU is adjacent and on top of tileD, in the same column",
                        100
                    ],
                    [
                        "(painted tileX colorY) means that tileX is painted/colored with colorY",
                        100
                    ],
                    [
                        "(available-color colorX) means that colorX is available",
                        100
                    ],
                    [
                        "A tile can only have at most one tile adjacent to it's right and at most one adjacent on top",
                        100
                    ],
                    [
                        "The only objects are the robots, the tiles and the colors",
                        100
                    ],
                    [
                        "A robot must be at exactly one tile",
                        100
                    ],
                    [
                        "Unless the rows are disconnected, the first row is up and the second row is down (the first is on top of the second), the second is on top of the third, and so on.",
                        100
                    ]
                ]
            }
        },
        "general": {
            "rules": [
                [
                    "I MUST ALWAYS express all conditions directly and descriptively. I CANNOT use logical operators like \"or\", nor \"not\" nor \"forall\" in PDDL predicates. Instead I must represent states through explicit enumeration of facts",
                    100
                ],
                [
                    "I MUST SPECIFY EVERYTHING even if it is ambiguous, in that case select one of the valid choices and stick to it, as I CANNOT use 'or' ",
                    100
                ],
                [
                    "I can USE comments for general sections of predicates",
                    100
                ],
                [
                    "I MUST take special CARE for respecting the syntax and meaning of the domain predicates",
                    100
                ]
            ]
        }
    }
}